"""General purpose unitilities."""
import re
from typing import Tuple
from urllib.parse import urlparse

from sac_requests.constants.chars import EMPTY_STR
from sac_requests.constants.chars import ENDPOINT_RGX
from sac_requests.constants.chars import FORWARDSLASH_STR
from sac_requests.constants.defaults import DEFAULT_HTTP_PORT
from sac_requests.constants.defaults import DEFAULT_HTTPS_PORT
from sac_requests.constants.general import HTTP
from sac_requests.constants.general import HTTPS


def clean_endpoint(endpoint: str) -> str:
    """Clean the endpoint to make it ready to concatinate with URL.

    Adds a '/' at the start of the endpoint if it is absent
    Removes any number of occurances of '/' at the end of the endpoint.

    :param endpoint: Endpoint to be cleaned
    :type endpoint: str
    :return: Cleaned endpoint
    :rtype: str
    """
    if not endpoint.startswith(FORWARDSLASH_STR):
        # Endpoint does not start with forward slash
        endpoint = f"{FORWARDSLASH_STR}{endpoint}"

    if endpoint.endswith(FORWARDSLASH_STR):
        # Endpoint ends with forward slash
        endpoint = re.sub(ENDPOINT_RGX, EMPTY_STR, endpoint)

    return endpoint


def get_url_components(url: str) -> Tuple[str, str, int, str]:
    """Get the url components from the url.

    Retrieves URL scheme, hostname, port and path (including query params)

    If the scheme is not supplied it will consider default HTTP.

    If the port is not present, it will assume 80 as a default

    :param url: URL to split in components
    :type url: str
    :return: URL scheme, hostname, port and path
    :rtype: Tuple[str, str, int, str]
    """
    default_ports = {
        HTTP: DEFAULT_HTTP_PORT,
        HTTPS: DEFAULT_HTTPS_PORT
    }

    components = urlparse(url, scheme=HTTP)

    # Get the port number
    scheme = components.scheme
    port = components.port or default_ports.get(scheme, DEFAULT_HTTP_PORT)

    # Get the Hostname
    host = components.hostname if components.hostname else ""

    # Get path along with the query parameters
    path = f"{components.path}"
    if components.query:
        path = f"{path}?{components.query}"

    return components.scheme, host, port, path  # type: ignore
